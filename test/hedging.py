from context import *
from scipy.io import loadmat


class TestHedging(unittest.TestCase):
    def setUp(self):
        self.graph = tc.data_sources.imagenet.ILSVRC65('data/data_sources').graph

    def test_probs(self):
        leaf_probs = np.array([
            [0.003982, 0.001293, 0.001878, 0.003126, 0.000606, 0.000259, 0.000085, 0.000440, 0.001380, 0.001320, 0.000651, 0.006732, 0.000828, 0.000418, 0.010146, 0.000684, 0.004185, 0.001456, 0.000557, 0.002198, 0.002131, 0.000888, 0.003521, 0.004918, 0.005596, 0.025010, 0.005912, 0.001099, 0.001050, 0.006573, 0.001492, 0.001988, 0.000972, 0.011614, 0.002366, 0.011134, 0.222112, 0.000037, 0.001495, 0.056318, 0.004791, 0.002999, 0.002554, 0.159464, 0.008689, 0.000178, 0.000806, 0.187213, 0.000057, 0.002878, 0.000515, 0.214784, 0.000606, 0.001797, 0.002663, 0.000077, 0.001480,],
            [0.006460, 0.002284, 0.001658, 0.000919, 0.001594, 0.003430, 0.002197, 0.001072, 0.002713, 0.001665, 0.003437, 0.002797, 0.003142, 0.000610, 0.002879, 0.000496, 0.006912, 0.000265, 0.001394, 0.004491, 0.007517, 0.001261, 0.005147, 0.002835, 0.005029, 0.007925, 0.003153, 0.002883, 0.021321, 0.001412, 0.006254, 0.002037, 0.000144, 0.009683, 0.008250, 0.059777, 0.002407, 0.000058, 0.006543, 0.006768, 0.013169, 0.089692, 0.102081, 0.012511, 0.234730, 0.001636, 0.290511, 0.009905, 0.000764, 0.019627, 0.000032, 0.000299, 0.005394, 0.000120, 0.001340, 0.005643, 0.001729,]
        ])
        gt_all_probs = np.array([
            [0.003982, 0.001293, 0.001878, 0.003126, 0.000606, 0.000259, 0.000085, 0.000440, 0.001380, 0.001320, 0.000651, 0.006732, 0.000828, 0.000418, 0.010146, 0.000684, 0.004185, 0.001456, 0.000557, 0.002198, 0.002131, 0.000888, 0.003521, 0.004918, 0.005596, 0.025010, 0.005912, 0.001099, 0.001050, 0.006573, 0.001492, 0.001988, 0.000972, 0.011614, 0.002366, 0.011134, 0.222112, 0.000037, 0.001495, 0.056318, 0.004791, 0.002999, 0.002554, 0.159464, 0.008689, 0.000178, 0.000806, 0.187213, 0.000057, 0.002878, 0.000515, 0.214784, 0.000606, 0.001797, 0.002663, 0.000077, 0.001480, 0.015180, 0.113307, 0.284753, 0.364839, 0.221921, 0.649592, 0.350408, 1.000000,],
            [0.006460, 0.002284, 0.001658, 0.000919, 0.001594, 0.003430, 0.002197, 0.001072, 0.002713, 0.001665, 0.003437, 0.002797, 0.003142, 0.000610, 0.002879, 0.000496, 0.006912, 0.000265, 0.001394, 0.004491, 0.007517, 0.001261, 0.005147, 0.002835, 0.005029, 0.007925, 0.003153, 0.002883, 0.021321, 0.001412, 0.006254, 0.002037, 0.000144, 0.009683, 0.008250, 0.059777, 0.002407, 0.000058, 0.006543, 0.006768, 0.013169, 0.089692, 0.102081, 0.012511, 0.234730, 0.001636, 0.290511, 0.009905, 0.000764, 0.019627, 0.000032, 0.000299, 0.005394, 0.000120, 0.001340, 0.005643, 0.001729, 0.007676, 0.187366, 0.028945, 0.761456, 0.014558, 0.790401, 0.209599, 1.000000,]
        ])
        all_probs = np.dot(leaf_probs, self.graph['leaf_membership'])
        np.testing.assert_array_almost_equal(all_probs, gt_all_probs, decimal=4)

    def test_info_rewards(self):
        gt_rewards = np.array
        np.testing.assert_array_almost_equal(self.graph['rewards'], gt_rewards, decimal=4)

    def test_darts_bisection(self):
        data = loadmat(os.path.join(support_dir, 'temp.mat'))
        data.keys()
        lambdas = tc.hedging.darts_bisection(
            data['leaf_probs'], data['accuracy_guarantees'].flatten(),
            data['labels']-1, self.graph, data['num_bs_iters'], data['confidence'])
        gt_lambdas = np.array([0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.167376, 0.501449, 1.018948, 1.393551, 1.944213, 2.962010, 5.545548,])
        np.testing.assert_array_almost_equal(lambdas, gt_lambdas, decimal=4)

    def test_darts_eval(self):
        data = loadmat(os.path.join(support_dir, 'temp_test.mat'))
        rewards, accuracies, height_portions, height_accs = tc.hedging.darts_eval(
            data['leaf_probs'], data['labels']-1, data['lambdas'].flatten(), self.graph)
        gt_rewards = np.array([0.414979, 0.414979, 0.414979, 0.414979, 0.414979, 0.414979, 0.413322, 0.404438, 0.383060, 0.360869, 0.333375, 0.282261, 0.189050,])
        gt_accuracies = np.array([0.567485, 0.567485, 0.567485, 0.567485, 0.567485, 0.567485, 0.620234, 0.700117, 0.801053, 0.852515, 0.906784, 0.953684, 0.991228,])
        gt_height_accs = np.array([0.456539, 0.858099, 0.907407, np.nan, 0.456539, 0.858099, 0.907407, np.nan, 0.456539, 0.858099, 0.907407, np.nan, 0.456539, 0.858099, 0.907407, np.nan, 0.456539, 0.858099, 0.907407, np.nan, 0.456539, 0.858099, 0.907407, np.nan, 0.485847, 0.872093, 0.892308, np.nan, 0.540393, 0.883086, 0.909091, np.nan, 0.620282, 0.920181, 0.944828, 1.000000, 0.664845, 0.940815, 0.971239, 1.000000, 0.731394, 0.962550, 0.985663, 1.000000, 0.802521, 0.981288, 0.996945, 1.000000, 0.926012, 0.994247, 1.000000, 1.000000,])
        gt_height_portions = np.array([0.725263,0.262105,0.012632,0.000000,0.725263,0.262105,0.012632,0.000000,0.725263,0.262105,0.012632,0.000000,0.725263,0.262105,0.012632,0.000000,0.725263,0.262105,0.012632,0.000000,0.725263,0.262105,0.012632,0.000000,0.652865,0.331930,0.015205,0.000000,0.535673,0.441170,0.023158,0.000000,0.405965,0.490877,0.101754,0.001404,0.342339,0.476257,0.158596,0.022807,0.273450,0.440351,0.228421,0.057778,0.194854,0.368772,0.306316,0.130058,0.101170,0.223626,0.364211,0.310994,])

        np.testing.assert_array_almost_equal(rewards, gt_rewards, decimal=4)
        np.testing.assert_array_almost_equal(accuracies, gt_accuracies, decimal=4)
        np.testing.assert_array_almost_equal(height_accs.T.flatten(), gt_height_accs, decimal=4)
        np.testing.assert_array_almost_equal(height_portions.T.flatten(), gt_height_portions, decimal=4)

if __name__ == '__main__':
    unittest.main()
